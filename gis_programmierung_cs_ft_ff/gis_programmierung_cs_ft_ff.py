# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GisProgrammierungCSFTFF
                                 A QGIS plugin
 Das Plugin analysiert DGMs und reale Punktwolken auf folgende geometrischen Alogrithmen: "Konvexe Hülle", "Punkt-in-Polygon-Test" und dem "Ear-Clipping-Algorithmus". Die Ergebnisse werden visualisert und einem Performancevergleich (m/s) unterzogen. Hierbei wird eine große Anzahl von Geoobjekten (> 1.000.000) in eine relationale und Objektdatenbank gespeichert und eingelesen. 
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-01-04
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Czarnach Simone, Feicht Tamara, Folger Florian
        email                : czarnach@hm.edu, Klein6@hm.edu, ffolger@hm.edu
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, qVersion, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QFileDialog
from qgis.core import QgsProject, Qgis

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .gis_programmierung_cs_ft_ff_dialog import GisProgrammierungCSFTFFDialog
import os.path

# Import vispy and numpy
import vispy
import numpy as np
import matplotlib.pyplot as plt

# Import classes


class GisProgrammierungCSFTFF:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'GisProgrammierungCSFTFF_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&GIS-Programmierung CS FT FF')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('GisProgrammierungCSFTFF', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/gis_programmierung_cs_ft_ff/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Gis-Programmierung Plugin'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&GIS-Programmierung CS FT FF'),
                action)
            self.iface.removeToolBarIcon(action)

    def close_function(self):
        """Closing function"""
        self.dlg.close()

    def import_points_convexHull(self):
        """Convex Hull Import function"""
        filename, _filter = QFileDialog.getOpenFileName(
            self.dlg, "Select file","", '*.csv, *.txt')
        self.dlg.ConvexHullImportPath.setText(filename) 

    def import_data_convexHull(self):
        """Import Data Convex Hull"""
        filenameInConvHull = self.dlg.ConvexHullImportPath.text()
        with open(filenameInConvHull, 'r') as file:
            np.genfromtxt(file, dtype=None)
    
    def export_points_convexHull(self):
        """Convex Hull Export function"""
        filename, _filter = QFileDialog.getSaveFileName(
            self.dlg, "Select output file ","", '*.csv, *.txt')
        self.dlg.ConvexHullExportPath.setText(filename) 

    def export_convexHull(self):
        """Export Convex Hull"""
        filenameInConvHull = self.dlg.ConvexHullImportPath.text()
        filenameOutConvHull = self.dlg.ConvexHullExportPath.text()
        output_file_convHull = open(filenameOutConvHull, 'w')

        with open(filenameInConvHull, 'r') as file:
            pointsConvexHull = np.genfromtxt(file, dtype=None)
            np.savetxt(output_file_convHull, pointsConvexHull, delimiter=' ', fmt='%f')
        output_file_convHull.close()

    def execute_convexHull(self):
        """Main Function"""
        filenameInConvHull = self.dlg.ConvexHullImportPath.text() # Filename Input
        filenameOutConvHull = self.dlg.ConvexHullExportPath.text() # Filename Output
        output_file_convHull = open(filenameOutConvHull, 'w')
        # Read file
        with open(filenameInConvHull, 'r') as file:
            S = np.genfromtxt(file, dtype=None)

        n = len(S)
        P = [None] * n
        l = np.where(S[:,0] == np.min(S[:,0]))
        pointOnHull = S[l[0][0]]

        def CCW(p1, p2, p3):
            """Function to know if we have a CCW turn (counter-clockwise)"""
            if (p3[1]-p1[1])*(p2[0]-p1[0]) >= (p2[1]-p1[1])*(p3[0]-p1[0]):
                return True
            return False

        i = 0
        while True:
            P[i] = pointOnHull
            endpoint = S[0]
            for j in range(1,n):
                if (endpoint[0] == pointOnHull[0] and endpoint[1] == pointOnHull[1]) or not CCW(S[j],P[i],endpoint):
                    endpoint = S[j]
            i = i + 1
            pointOnHull = endpoint
            if endpoint[0] == P[0][0] and endpoint[1] == P[0][1]:
                break

        for i in range(n):
            if P[-1] is None:
                del P[-1]
        P = np.array(P)
        np.savetxt(output_file_convHull, np.array(P), delimiter=' ', fmt='%f') #save File
        self.iface.messageBar().pushMessage("Success", "Output file written at " + filenameOutConvHull, level=Qgis.Success, duration=3)
        
        fig = plt.figure()
        ax = fig.add_subplot(111)  # vgl. https://matplotlib.org/api/_as_gen/matplotlib.pyplot.subplot.html (10.12.2018)
        # vgl. https://matplotlib.org/api/_as_gen/matplotlib.axes.Axes.set_ylim.html
        plt.ylim(-10, 15)
        plt.xlim(-10, 15)
        # vgl. https://matplotlib.org/api/_as_gen/matplotlib.axes.Axes.plot.html  
        plt.plot(P[:,0],P[:,1], 'b-')  # b = blau
        plt.plot([P[-1,0],P[0,0]],[P[-1,1],P[0,1]], 'b-')
        # Punkte in Hülle: rot
        plt.plot(S[:,0],S[:,1],"r^")
        # Punkte auf Hülle: grün + square marker
        plt.plot(P[:,0],P[:,1],"gs", markersize=7)
        # Koordinaten anzeigen
        for xy in zip(P[:,0],P[:,1]):                                                           
            ax.annotate('%s, %s' %xy, xy=xy, textcoords='data', ha='center', va='bottom', fontstyle='normal')     
        plt.axis('on')
        plt.title('Berechnung einer konvexen Hülle')
        plt.show()
        
    def import_points_PIP(self):
        """Point in Polygon Import function"""
        filename, _filter = QFileDialog.getOpenFileName(
            self.dlg, "Select file","", '*.csv, *.txt')
        self.dlg.ConvexHullImportPath.setText(filename) 

    def run(self):
        """Run method that performs all the real work"""
        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = GisProgrammierungCSFTFFDialog()
            self.dlg.ConvexHullImport.clicked.connect(self.import_points_convexHull) # Convex Hull Import Button
            self.dlg.ConvexHullExport.clicked.connect(self.export_points_convexHull) # Convex Hull Import Button
            self.dlg.ImportDataConvexHull.clicked.connect(self.import_data_convexHull) # Import file
            self.dlg.ExportDataConvexHull.clicked.connect(self.export_convexHull) # Export file
            self.dlg.generateConvexHull.clicked.connect(self.execute_convexHull) # Triggers Convex Hull algorithm

            self.dlg.PointsImportPIP.clicked.connect(self.import_points_PIP) # Point in Polygon Import Button

            self.dlg.closeConvexHull.clicked.connect(self.close_function) # close UI
            self.dlg.closePIP.clicked.connect(self.close_function) # close UI
            self.dlg.closeEarClipping.clicked.connect(self.close_function) # close UI
            self.dlg.closeLaserData.clicked.connect(self.close_function) # close UI
            self.dlg.closeDTM.clicked.connect(self.close_function) # close UI

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            
            pass

